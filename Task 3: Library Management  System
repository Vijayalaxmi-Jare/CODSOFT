#include <iostream>
#include <vector>
#include <string>
#include <ctime>
using namespace std;

// Book class to store book information
class Book {
public:
    string title;
    string author;
    string ISBN;
    bool isAvailable;

    Book(string t, string a, string i) : title(t), author(a), ISBN(i), isAvailable(true) {}
};

// Borrower class to store borrower information
class Borrower {
public:
    string name;
    int borrowerID;
    vector<string> borrowedBooks;

    Borrower(string n, int id) : name(n), borrowerID(id) {}
};

// Transaction class to store transaction information
class Transaction {
public:
    int borrowerID;
    string ISBN;
    time_t checkoutDate;
    time_t returnDate;
    bool isReturned;

    Transaction(int id, string isbn, time_t coDate) : borrowerID(id), ISBN(isbn), checkoutDate(coDate), isReturned(false) {}
};

vector<Book> bookDatabase;
vector<Borrower> borrowerDatabase;
vector<Transaction> transactionDatabase;

// Function to add a book to the database
void addBook(string title, string author, string ISBN) {
    bookDatabase.push_back(Book(title, author, ISBN));
}

// Function to search for a book by title, author, or ISBN
void searchBook() {
    string query;
    cout << "Enter title, author, or ISBN to search: ";
    cin.ignore();
    getline(cin, query);
    for (const auto& book : bookDatabase) {
        if (book.title == query || book.author == query || book.ISBN == query) {
            cout << "Book found: " << book.title << " by " << book.author << " (ISBN: " << book.ISBN << ")" << (book.isAvailable ? " - Available" : " - Not available") << endl;
            return;
        }
    }
    cout << "Book not found." << endl;
}

// Function to check out a book
void checkoutBook(int borrowerID, string ISBN) {
    for (auto& book : bookDatabase) {
        if (book.ISBN == ISBN && book.isAvailable) {
            book.isAvailable = false;
            time_t now = time(0);
            transactionDatabase.push_back(Transaction(borrowerID, ISBN, now));
            cout << "Book checked out successfully." << endl;
            return;
        }
    }
    cout << "Book is not available for checkout." << endl;
}

// Function to return a book
void returnBook(int borrowerID, string ISBN) {
    for (auto& book : bookDatabase) {
        if (book.ISBN == ISBN && !book.isAvailable) {
            book.isAvailable = true;
            for (auto& transaction : transactionDatabase) {
                if (transaction.borrowerID == borrowerID && transaction.ISBN == ISBN && !transaction.isReturned) {
                    transaction.returnDate = time(0);
                    transaction.isReturned = true;
                    cout << "Book returned successfully." << endl;
                    return;
                }
            }
        }
    }
    cout << "Error in returning the book." << endl;
}

// Function to calculate fine for overdue books
void calculateFine(int borrowerID, string ISBN) {
    const int finePerDay = 1; // Fine amount per day
    time_t now = time(0);
    for (const auto& transaction : transactionDatabase) {
        if (transaction.borrowerID == borrowerID && transaction.ISBN == ISBN && !transaction.isReturned) {
            double diff = difftime(now, transaction.checkoutDate) / (60 * 60 * 24);
            if (diff > 14) { // Assuming 14 days loan period
                cout << "Fine for overdue book: $" << (diff - 14) * finePerDay << endl;
            } else {
                cout << "No fine. Book is within the loan period." << endl;
            }
            return;
        }
    }
    cout << "No such transaction found." << endl;
}

// Main function to demonstrate the Library Management System
int main() {
    int choice;
    while (true) {
        cout << "\nLibrary Management System\n";
        cout << "1. Add Book\n";
        cout << "2. Search Book\n";
        cout << "3. Checkout Book\n";
        cout << "4. Return Book\n";
        cout << "5. Calculate Fine\n";
        cout << "6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        if (choice == 1) {
            string title, author, ISBN;
            cout << "Enter book title: ";
            cin.ignore();
            getline(cin, title);
            cout << "Enter book author: ";
            getline(cin, author);
            cout << "Enter book ISBN: ";
            getline(cin, ISBN);
            addBook(title, author, ISBN);
        } else if (choice == 2) {
            searchBook();
        } else if (choice == 3) {
            int borrowerID;
            string ISBN;
            cout << "Enter borrower ID: ";
            cin >> borrowerID;
            cout << "Enter book ISBN: ";
            cin.ignore();
            getline(cin, ISBN);
            checkoutBook(borrowerID, ISBN);
        } else if (choice == 4) {
            int borrowerID;
            string ISBN;
            cout << "Enter borrower ID: ";
            cin >> borrowerID;
            cout << "Enter book ISBN: ";
            cin.ignore();
            getline(cin, ISBN);
            returnBook(borrowerID, ISBN);
        } else if (choice == 5) {
            int borrowerID;
            string ISBN;
            cout << "Enter borrower ID: ";
            cin >> borrowerID;
            cout << "Enter book ISBN: ";
            cin.ignore();
            getline(cin, ISBN);
            calculateFine(borrowerID, ISBN);
        } else if (choice == 6) {
            break;
        } else {
            cout << "Invalid choice. Please try again." << endl;
        }
    }
    return 0;
}


